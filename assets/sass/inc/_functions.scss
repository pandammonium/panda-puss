@use 'sass:color';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';

@function get-next-fibonacci-number($n-minus-2, $n-minus-1) {
  @if ($n-minus-2 > $n-minus-1) {
    @error "n-minus-2 (#{$n-minus-2}) cannot be higher than n-minus-1 (#{$n-minus-1})";
  }
  @if ($n-minus-2 < 0) {
    @error "n-minus-2 cannot be less than 0 (zero)";
  }
  @if ($n-minus-1 < 0) {
    @error "n-minus-1 cannot be less than 0 (zero)";
  }
  // @if ($n-minus-1 == 0) {
  //   @error "n-minus-1 cannot be #{$n-minus-1} (zero)";
  // }
  @if ($n-minus-2 == 0 and $n-minus-1 == 0) {
    @return 1;
  }
  @return $n-minus-1 + $n-minus-2;
} // end of @function get-next-fibonacci-number

@function add-next-fibonacci-number($fibonacci-numbers) {
  $-n-minus-1: list.nth($fibonacci-numbers, -1);
  $-n-minus-2: list.nth($fibonacci-numbers, -2);
  @if ($-n-minus-2 > $-n-minus-1) {
    @error "n-minus-2 (#{$-n-minus-2}) cannot be higher than n-minus-1 (#{$-n-minus-1}): [#{$fibonacci-numbers}]";
  }
  @if ($-n-minus-2 < 0) {
    @error "n-minus-2 cannot be less than 0 (zero): [#{$fibonacci-numbers}]";
  }
  @if ($-n-minus-1 < 1) {
    @error "n-minus-1 cannot be less than 0 (zero): [#{$fibonacci-numbers}]";
  }
  @if ($-n-minus-2 == 0 and $-n-minus-1 == 0) {
    @warn "n-minus-1 should not be 0 (zero): [#{$fibonacci-numbers}]";
    @return append($fibonacci-numbers, 1);
  }
  @return append($fibonacci-numbers, $-n-minus-2 + $-n-minus-1);
} // End of @function add-next-fibonacci-number

// Removes the unit of a length
// @param {number} $number - Number to remove unit from
// @see https://css-tricks.com/snippets/sass/strip-unit-function/
// @return {number} - Unitless number
@function strip-unit($number) {
  // @debug 'Input #{$number} is a #{type-of($number)}';
  @if type-of($number) == 'number' and not unitless($number) {
    // @debug 'Units stripped from #{$number} â†’ ' + math.div($number, ($number * 0 + 1));
    @return math.div($number, ($number * 0 + 1));
  }
  // @debug 'Cannot strip units from #{$number}';
  @return $number;
} // End of @function strip-unit

@function average($numbers...) {
  $sum: 0;
  $count: 0;
  // @debug 'Number #{$count}; running total: #{$sum}';
  @each $number in $numbers {
    $count: $count + 1;
    $sum: $sum + strip-unit($number);
    // @debug 'Number #{$count}: #{$number}; running total: #{$sum}';
  }
  @if $count == 0 {
    @error 'Can\'t take average of no numbers.';
  }
  // @debug 'Average: #{$sum} / #{$count} = #{math.div($sum, $count)}';
  @return math.div($sum, $count);
} // End of @function average

@function getColour($colour-system, $colour, $colour-name: null) {
  @if $colour-system == 'hsla' or $colour-system == 'HSLA' {
    @return $colour-name + ': hsla(' + hue($colour)  + ', ' + saturation($colour) + ', ' + lightness($colour) + ', ' + alpha($colour) + ')';
  } @else if $colour-system == 'rgb' or $colour-system == 'RGB' {
    @return $colour-name + ': rgb(' + red($colour)  + ', ' + green($colour) + ', ' + blue($colour) + ', ' + alpha($colour) + ')';
  } @else if $colour-system == 'rgba' or $colour-system == 'RGBA' {
    @return $colour-name + ': rgb(' + red($colour)  + ', ' + green($colour) + ', ' + blue($colour) + ', ' + alpha($colour) + ')';
  } @else if $colour-system == 'hwb' or $colour-system == 'hwb' {
    @return $colour-name + ': hwb(' + hue($colour)  + ', ' + color.whiteness($colour) + ', ' + color.blackness($colour) + ')';
  } @else if $colour-system == 'hwba' or $colour-system == 'hwba' {
    @return $colour-name + ': hwba(' + hue($colour)  + ', ' + color.whiteness($colour) + ', ' + color.blackness($colour) + ', ' + alpha($colour) + ')';
  } @else {
    @error 'Unrecognised colour system: ' + $colour-system;
  }
} // End of @function getColour
