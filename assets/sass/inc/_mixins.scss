@use 'sass:color';
@use 'sass:math';
@use '../settings/colours';

@mixin background-shadow($colour) {
  // border: 1px solid colours.$pp--colour--bg-primary;
  // box-shadow: 0 0 30px colours.$pp--colour--fg-secondary;
  // box-shadow: 0 0 10px $colour;
  // First box-shadow is on the top; last box-shadow is on the bottom:
  $main-len: 5px;
  $long-len: 0.5 * $main-len;
  $lightness-factor: 20;
  $short-lightness-factor: math.sqrt($lightness-factor) * -1%;
  $main-lightness-factor: $lightness-factor * 0%;
  $long-lightness-factor: math.sqrt($lightness-factor) * 1%;
  box-shadow:
    0 0 1px 1px color.adjust($colour, $lightness: $short-lightness-factor),
    0 0 $main-len ($main-len + 1) color.adjust($colour, $lightness: $main-lightness-factor),
    0 0 $long-len ($long-len + 1) color.adjust($colour, $lightness: $long-lightness-factor),
  ;
  margin: {
    top: $main-len;
    bottom: $main-len;
  };
}
@mixin text-shadow($colour) {
  // border: 1px solid colours.$pp--colour--bg-primary;
  // box-shadow: 0 0 30px colours.$pp--colour--fg-secondary;
  // box-shadow: 0 0 10px $colour;
  // First box-shadow is on the top; last box-shadow is on the bottom:
  $main-len: 5px;
  $long-len: 2 * $main-len;
  $lightness-factor: 50%;
  text-shadow:
    0 0 1px color.adjust($colour, $lightness: -$lightness-factor + 10),
    0 0 $main-len color.adjust($colour, $lightness: (0 * $lightness-factor)),
    0 0 (2 * $main-len) color.adjust($colour, $lightness: $lightness-factor),
  ;
}

@mixin ui-element {
  border-color: currentColor;
  // border-style: solid;
  border-width: 1px;
}
// // This palaver fakes inset and outset so it looks better in Firefox. However, the colour must be hard-coded: 'currentColor' can't be used because at preprocessing time (i.e. when Sass sees it), it hasn't been defined: it's only defined once the page is rendered.
// // @see https://stackoverflow.com/a/70990728
// // This will be a problem if a different colour is used.
// $current-colour: colours.$pp--colour--fg-primary;
// $change-by: 80%;
// $darker: color.scale($current-colour, $lightness: (-1 * $change-by));
// $lighter: color.scale($current-colour, $lightness: $change-by);
// // @debug $current-colour + ' Lx ' + (-1 * $change-by) + ' => ' + $darker;
// // @debug $current-colour + ' Lx  ' + $change-by + ' => ' + $lighter;
@mixin ui-field {
  // border-bottom-color: $lighter;
  // border-left-color: $darker;
  // border-right-color: $lighter;
  // border-top-color: $darker;
  border-style: inset;
}
@mixin ui-button {
  // border-bottom-color: $darker;
  // border-left-color: $lighter;
  // border-right-color: $darker;
  // border-top-color: $lighter;
  border-style: outset;
}
@mixin ui-element-border {
  textarea,
  input,
  button {
    @include ui-element;
  }
  input:not([type=submit]),
  textarea {
    @include ui-field;
  }
  input[type="submit"] {
    @include ui-button;
  }
}

@mixin code-lang {
  // List of programming languages:
  // https://en.wikipedia.org/wiki/List_of_programming_languages
  // Plus BibTeX, LaTeX
  $langs: 'ada', 'algol', 'basic', 'bibtex', 'c', 'c-minus-minus', 'c-plus-plus', 'c-sharp', 'caml', 'css', 'curl', 'delphi', 'fortan', 'go', 'haskell', 'html', 'javascript', 'js', 'latex', 'matlab', 'modula', 'objective-c', 'occam', 'perl', 'php';

  $code-hue-initial: 0;
  $code-hue: $code-hue-initial;
  $hue-increment: 7.5;
  @each $lang in $langs {
    // @debug '$lang: ' + #{$lang} + '; $code-hue: ' + #{$code-hue};
    &.#{$lang} {
      color: hsla($code-hue, 50%, 50%, 100%);
      $code-hue: $code-hue + $hue-increment;
      @if $code-hue > 360 - $hue-increment {
        $code-hue-initial: $code-hue-initial + 1;
        $code-hue: $code-hue-initial;
      }
    }
  }
}

@mixin list-spacing-left($is-front_end) {
  $list-type: 'ol, ul, dl';
  @if ($is-front_end == false) {
    // $list-type: ':not(.pp-footer-blocks) .wp-block-list ol, :not(.pp-footer-blocks) .wp-block-list ul, :not(.pp-footer-blocks) .wp-block-list dl';
    #{$list-type} {
      padding: {
        // left: revert;
        inline-start: revert !important;
      }
    }
  } @else if ($is-front_end == true) {
    #{$list-type} {
      padding-inline-start: revert;
    }
    $list-type: '.pp-footer-blocks ' + $list-type;
    #{$list-type} {
      // Default value; works best in Chrome, whose specific test is unacceptable to SASS for 22–28:
      // outline: 5px solid black;
      padding-inline-start: 2.25ch;
      // Browser-specific settings taken from https://www.browserstack.com/guide/create-browser-specific-css; Opera 85.0, Chrome 100.0 and Safari15.4+ all seem to use the Safari 6.1–10.0 one: put it first so that the more specific ones match.
      // Don't bother with IE.
      @media screen and (min-color-index: 0) and(-webkit-min-device-pixel-ratio: 0) {
        // Safari 6.1-10.0, 15.4+
        // Opera 85.0
        // Chrome 100.0+
        // outline: 5px solid green;
        padding-inline-start: 2ch;
      }
      @supports (-ms-ime-align:auto) {
        // Edge
        // outline: 5px solid skyblue;
        padding-inline-start: 2.25ch;
      }
      @media screen and (-webkit-min-device-pixel-ratio:0) and (min-resolution:.001dpcm) {
        // Chrome 29+
        // Opera 85.0+
        // outline: 5px solid red;
        padding-inline-start: 2.25ch;
      }
      @media not all and (min-resolution: 0.001dpcm) {
        @supports (-webkit-appearance: none) and (not (stroke-color: transparent)) {
          // Safari 10.1
          // outline: 5px solid darkblue;
          padding-inline-start: 2ch;
        }
        @supports (-webkit-appearance: none) and (stroke-color: transparent) {
          // Safari 11+
          // outline: 5px solid lightblue;
          padding-inline-start: 2.125ch;
        }
      }
      @-moz-document url-prefix() {
        // Firefox
        // outline: 5px solid orange;
        padding-inline-start: 1.5ch;
      }
      @supports (-moz-appearance: none) {
        // Firefox (native OS styling)
        // outline: 5px solid darkorange;
        padding-inline-start: 1.5ch;
      }
    }
  }
}

@mixin initialise-spacing($is-front_end) {
  $reset-margin: ':root, body,\
  header, footer, div,\
  ol, ul, menu, div, p, dl, img, time,\
  multicol, blockquote, figure,\
  h1, h2, h3, h4, h5, h6,\
  :is(article, aside, nav, section) h1,\
  button, input, optgroup, select, textarea, legend, fieldset,\
  .wp-block, .wp-site-blocks, .wp-block-post-author__bio, .wp-block-post-template, .wp-block-search__button, .wp-block-search__input,\
  .pp-template .wp-block-post .pp-article, .single .pp-main:not(.pp-front-page) .pp-article, .page .pp-main:not(.pp-front-page) .pp-article,\
  .block-editor-block-list__layout .pp-main:not(.pp-front-page) .pp-article,\
  .single .pp-main.pp-front-page .pp-article, .page .pp-main.pp-front-page .pp-article, .block-editor-block-list__layout .pp-main.pp-front-page .pp-article, .pp-template .wp-block-post .pp-article,\
  .wp-block-query-pagination > .wp-block-query-pagination-next, .wp-block-query-pagination > .wp-block-query-pagination-numbers, .wp-block-query-pagination > .wp-block-query-pagination-previous,\
  .wp-block-code, wp-block-code > code, .wp-site-blocks .wp-block-code, .wp-site-blocks .wp-block-code code,\
  .block-editor-block-list__block wp-block .wp-block-code basic, pre code';

  @if ($is-front_end == true) {
    $reset-margin: #{$reset-margin} + ', .wp-block-post-comments .comment-form-cookies-consent #wp-comment-cookies-consent, button, ::file-selector-button, input:is([type="reset"], [type="button"], [type="submit"]), .wp-block-post-comments input:not([type="submit"]):not([type="checkbox"]), .wp-block-post-comments textarea, .wp-block-post-author__avatar, .wp-block-post-author__content, .wp-block-post-author__byline, .wp-block-post-author__name, .wp-block-post-author__bio';
  }

  #{$reset-margin} {
    // @debug #{$is-front_end} – #{&};
    margin: 0 {
      block: 0;
      inline: 0;
    };
    padding: 0 {
      block: 0;
      inline: 0;
    };
    // outline: 1px dotted hotpink;
  }
  @include list-spacing-left($is-front_end);
}
