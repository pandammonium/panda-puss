$is-front_end: true !default;
$site-width: 1000px !default;

@use 'sass:map';
@use '../inc/mixins';
@use '../settings/spacing';

@if $is-front_end != true and $is-front_end != false {
  @error "Can't tell if is front end or back end. Second argument should be boolean (true: front end; false: back end).";
}

.wp-site-blocks {
  $row-gap: calc(1 * #{map.get(spacing.$pp--spacing, "vertical")});
  // background-color: papayawhip;
  // border: 1px solid papayawhip;
  @if $is-front_end == true {
    // @debug 'Front end: ' + #{&};
    margin: {
      // Centre the site content:
      left: auto;
      right: auto;
    };
    width: 90vw;
    max-width: $site-width;
    min-height: calc(100vh - (3 * $row-gap));

    // Grid container
    display: grid;
    grid-template-columns: auto;
    grid-template-rows: min-content 1fr min-content;
    grid-template-areas:
      "header"
      "content"
      "footer"
    ;
    column-gap: 0;
    row-gap: $row-gap;
  } @else {
    // @debug 'Back end: ' + #{&};
  }
  // End of grid container

  .pp-header {
    // Grid item
    grid-area: header;
    // End of grid item
  }

  .pp-site {
    // border: 1px solid orange;
    // Grid item
    grid-area: content;
    // End of grid item
    &.pp-columns {
      // Flex container
      display: flex;
      flex-flow: row nowrap;
      $col-gap: calc(2 * #{map.get(spacing.$pp--spacing, "horizontal")});
      gap: calc(1 * #{map.get(spacing.$pp--spacing, "vertical")}) $col-gap;
      place-content: stretch;
      place-items: stretch;
      @media screen and (max-width: 782px) {
        flex-flow: row wrap;
      }
      // End of flex container

      $width-col-main: 75%;
      .pp-column.pp-main_column {
        // border: 1px solid green;
        // Flex item
        flex: 2 1 $width-col-main;
        order: 2;
        @media screen and (max-width: 782px) {
          flex: 1 1 100%;
          order: 1;
        }
        // End of flex item
      }
      .pp-column.pp-sidebar {
        // border: 1px solid blue;
        margin: 0;
        // Flex item
        flex: 1 1 clamp(100px, (100% - $width-col-main), 300px);
        @media screen and (min-width: 600px) and (max-width: 782px) {
          flex: 1 1 calc(50% - (0.5 * $col-gap));
        }
        @media screen and (max-width: 599px) {
          flex: 1 1 100%;
        }
        // End of flex item
        &.pp-sidebar_lhs {
          // border: 1px solid blue;
          // Flex item
          order: 1;
          @media screen and (max-width: 782px) {
            order: 2;
          }
          // End of flex item
        }
        &.pp-sidebar_rhs {
          // border: 1px solid blue;
          // Flex item
          order: 3;
          // End of flex item
        }
      }
    }
    &.pp-main.pp-front_page {
      // Grid container
      display: grid;
      grid-template-columns: auto;
      grid-template-rows: min-content min-content;
      grid-template-areas:
        "info"
        "posts"
      ;
      column-gap: 0;
      row-gap: $row-gap;
      // End of grid container
      .pp-column-block {
        // Grid item
        grid-area: info;
        // End of grid item
      }
      .pp-query.pp-loop.pp-front_page {
        // Grid item
        grid-area: posts;
        // End of grid item
      }
    }
    .pp-main.pp-home {
      // Grid container
      display: grid;
      grid-template-columns: auto;
      grid-template-rows: min-content min-content;
      grid-template-areas:
        "description"
        "posts"
        "navigation"
      ;
      column-gap: 0;
      row-gap: $row-gap;
      // End of grid container
      .pp-description {
        // Grid item
        grid-area: description;
        // End of grid item
      }
      .pp-query.pp-loop.pp-home {
        // Grid item
        grid-area: posts;
        // End of grid item
      }
      .pp-pagination {
        // Grid item
        grid-area: navigation;
        // End of grid item
      }
    }
  }
  .pp-footer {
    // Grid item
    grid-area: footer;
    // End of grid item;
  }
}
